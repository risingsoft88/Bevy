//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import SideMenu
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Menu`.
    static let menu = _R.storyboard.menu()
    /// Storyboard `Social`.
    static let social = _R.storyboard.social()
    /// Storyboard `Sub`.
    static let sub = _R.storyboard.sub()
    /// Storyboard `Wallet`.
    static let wallet = _R.storyboard.wallet()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Menu", bundle: ...)`
    static func menu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Social", bundle: ...)`
    static func social(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.social)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sub", bundle: ...)`
    static func sub(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sub)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Wallet", bundle: ...)`
    static func wallet(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.wallet)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `SF-Pro-Display-Bold.otf`.
    static let sfProDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Regular.otf`.
    static let sfProDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Regular", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Semibold.otf`.
    static let sfProDisplaySemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Semibold", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Medium.otf`.
    static let sfProTextMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Medium", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Semibold.otf`.
    static let sfProTextSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Semibold", pathExtension: "otf")
    /// Resource file `SplashScreen.png`.
    static let splashScreenPng = Rswift.FileResource(bundle: R.hostingBundle, name: "SplashScreen", pathExtension: "png")
    /// Resource file `TTNorms-Bold.otf`.
    static let ttNormsBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "TTNorms-Bold", pathExtension: "otf")
    /// Resource file `TTNorms-Medium.otf`.
    static let ttNormsMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "TTNorms-Medium", pathExtension: "otf")
    /// Resource file `TTNorms-Regular.otf`.
    static let ttNormsRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "TTNorms-Regular", pathExtension: "otf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Bold", withExtension: "otf")`
    static func sfProDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Regular", withExtension: "otf")`
    static func sfProDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Semibold", withExtension: "otf")`
    static func sfProDisplaySemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplaySemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Medium", withExtension: "otf")`
    static func sfProTextMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Semibold", withExtension: "otf")`
    static func sfProTextSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SplashScreen", withExtension: "png")`
    static func splashScreenPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.splashScreenPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TTNorms-Bold", withExtension: "otf")`
    static func ttNormsBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ttNormsBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TTNorms-Medium", withExtension: "otf")`
    static func ttNormsMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ttNormsMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TTNorms-Regular", withExtension: "otf")`
    static func ttNormsRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ttNormsRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")
    /// Font `SFProDisplay-Semibold`.
    static let sfProDisplaySemibold = Rswift.FontResource(fontName: "SFProDisplay-Semibold")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    /// Font `SFProText-Semibold`.
    static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")
    /// Font `TTNorms-Bold`.
    static let ttNormsBold = Rswift.FontResource(fontName: "TTNorms-Bold")
    /// Font `TTNorms-Medium`.
    static let ttNormsMedium = Rswift.FontResource(fontName: "TTNorms-Medium")
    /// Font `TTNorms-Regular`.
    static let ttNormsRegular = Rswift.FontResource(fontName: "TTNorms-Regular")

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Semibold", size: ...)`
    static func sfProDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplaySemibold, size: size)
    }

    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }

    /// `UIFont(name: "SFProText-Semibold", size: ...)`
    static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemibold, size: size)
    }

    /// `UIFont(name: "TTNorms-Bold", size: ...)`
    static func ttNormsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ttNormsBold, size: size)
    }

    /// `UIFont(name: "TTNorms-Medium", size: ...)`
    static func ttNormsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ttNormsMedium, size: size)
    }

    /// `UIFont(name: "TTNorms-Regular", size: ...)`
    static func ttNormsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ttNormsRegular, size: size)
    }

    static func validate() throws {
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SF-Pro-Display-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SF-Pro-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Semibold' could not be loaded, is 'SF-Pro-Display-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SF-Pro-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'SF-Pro-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ttNormsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TTNorms-Bold' could not be loaded, is 'TTNorms-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ttNormsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TTNorms-Medium' could not be loaded, is 'TTNorms-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ttNormsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TTNorms-Regular' could not be loaded, is 'TTNorms-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 207 images.
  struct image {
    /// Image `CleanBackground`.
    static let cleanBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "CleanBackground")
    /// Image `DriverScreen`.
    static let driverScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "DriverScreen")
    /// Image `DriverSearchScreen`.
    static let driverSearchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "DriverSearchScreen")
    /// Image `FeedLivestreamScreen`.
    static let feedLivestreamScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "FeedLivestreamScreen")
    /// Image `FeedPostScreen`.
    static let feedPostScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "FeedPostScreen")
    /// Image `FindRideScreen`.
    static let findRideScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "FindRideScreen")
    /// Image `LoginOnboarding01`.
    static let loginOnboarding01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginOnboarding01")
    /// Image `LoginOnboarding02`.
    static let loginOnboarding02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginOnboarding02")
    /// Image `LoginOnboarding03`.
    static let loginOnboarding03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginOnboarding03")
    /// Image `LoginOnboarding04`.
    static let loginOnboarding04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginOnboarding04")
    /// Image `LoginWithScreen1`.
    static let loginWithScreen1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginWithScreen1")
    /// Image `LoginWithScreen2`.
    static let loginWithScreen2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginWithScreen2")
    /// Image `LoginWithScreen`.
    static let loginWithScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginWithScreen")
    /// Image `OnboardingScreen1`.
    static let onboardingScreen1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnboardingScreen1")
    /// Image `OnboardingScreen2`.
    static let onboardingScreen2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnboardingScreen2")
    /// Image `OnboardingScreen3`.
    static let onboardingScreen3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnboardingScreen3")
    /// Image `OnboardingScreen4`.
    static let onboardingScreen4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnboardingScreen4")
    /// Image `OnboardingScreen5`.
    static let onboardingScreen5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnboardingScreen5")
    /// Image `SocialScreen`.
    static let socialScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "SocialScreen")
    /// Image `SplashScreen`.
    static let splashScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashScreen")
    /// Image `VideoCallScreen`.
    static let videoCallScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "VideoCallScreen")
    /// Image `WalletBackground`.
    static let walletBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "WalletBackground")
    /// Image `WalletDashboardScreen`.
    static let walletDashboardScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "WalletDashboardScreen")
    /// Image `WalletHomeScreen`.
    static let walletHomeScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "WalletHomeScreen")
    /// Image `WalletPlusWelcomeScreen`.
    static let walletPlusWelcomeScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "WalletPlusWelcomeScreen")
    /// Image `WelcomeScreen`.
    static let welcomeScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "WelcomeScreen")
    /// Image `icon_account_white`.
    static let icon_account_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_account_white")
    /// Image `icon_add_card`.
    static let icon_add_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_add_card")
    /// Image `icon_add_circle`.
    static let icon_add_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_add_circle")
    /// Image `icon_added_red`.
    static let icon_added_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_added_red")
    /// Image `icon_alarm_noti`.
    static let icon_alarm_noti = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_alarm_noti")
    /// Image `icon_apple`.
    static let icon_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_apple")
    /// Image `icon_arrow_black`.
    static let icon_arrow_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_black")
    /// Image `icon_arrow_white`.
    static let icon_arrow_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_white")
    /// Image `icon_arrowdown_black`.
    static let icon_arrowdown_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrowdown_black")
    /// Image `icon_arrowupload_white`.
    static let icon_arrowupload_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrowupload_white")
    /// Image `icon_bell_white`.
    static let icon_bell_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bell_white")
    /// Image `icon_calendar`.
    static let icon_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar")
    /// Image `icon_chat`.
    static let icon_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_chat")
    /// Image `icon_checkbox_off`.
    static let icon_checkbox_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_checkbox_off")
    /// Image `icon_checkbox_on`.
    static let icon_checkbox_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_checkbox_on")
    /// Image `icon_checked_black`.
    static let icon_checked_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_checked_black")
    /// Image `icon_checked`.
    static let icon_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_checked")
    /// Image `icon_chip_white`.
    static let icon_chip_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_chip_white")
    /// Image `icon_close_black`.
    static let icon_close_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_black")
    /// Image `icon_close_red`.
    static let icon_close_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_red")
    /// Image `icon_close`.
    static let icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close")
    /// Image `icon_closebutton`.
    static let icon_closebutton = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_closebutton")
    /// Image `icon_contact_plus`.
    static let icon_contact_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_contact_plus")
    /// Image `icon_create_white`.
    static let icon_create_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_create_white")
    /// Image `icon_crypto_inactive`.
    static let icon_crypto_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_crypto_inactive")
    /// Image `icon_discover_active`.
    static let icon_discover_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_discover_active")
    /// Image `icon_discover_inactive`.
    static let icon_discover_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_discover_inactive")
    /// Image `icon_dm`.
    static let icon_dm = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dm")
    /// Image `icon_down_red`.
    static let icon_down_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_down_red")
    /// Image `icon_driver_inactive`.
    static let icon_driver_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_driver_inactive")
    /// Image `icon_eye_black`.
    static let icon_eye_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_black")
    /// Image `icon_eye_white`.
    static let icon_eye_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_white")
    /// Image `icon_facebook_black`.
    static let icon_facebook_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_facebook_black")
    /// Image `icon_facebook`.
    static let icon_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_facebook")
    /// Image `icon_google`.
    static let icon_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_google")
    /// Image `icon_greendownarrow`.
    static let icon_greendownarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_greendownarrow")
    /// Image `icon_heart_black`.
    static let icon_heart_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_heart_black")
    /// Image `icon_heart_white`.
    static let icon_heart_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_heart_white")
    /// Image `icon_heart`.
    static let icon_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_heart")
    /// Image `icon_help_inactive`.
    static let icon_help_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_help_inactive")
    /// Image `icon_hotels_inactive`.
    static let icon_hotels_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_hotels_inactive")
    /// Image `icon_instagram_black`.
    static let icon_instagram_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_instagram_black")
    /// Image `icon_logout`.
    static let icon_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_logout")
    /// Image `icon_mail_black`.
    static let icon_mail_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mail_black")
    /// Image `icon_mail`.
    static let icon_mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mail")
    /// Image `icon_menu_black`.
    static let icon_menu_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_black")
    /// Image `icon_menu`.
    static let icon_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu")
    /// Image `icon_more_black`.
    static let icon_more_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more_black")
    /// Image `icon_more_rect`.
    static let icon_more_rect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more_rect")
    /// Image `icon_more`.
    static let icon_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more")
    /// Image `icon_msg_black`.
    static let icon_msg_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_msg_black")
    /// Image `icon_msg`.
    static let icon_msg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_msg")
    /// Image `icon_new_post`.
    static let icon_new_post = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_new_post")
    /// Image `icon_p2p_inactive`.
    static let icon_p2p_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_p2p_inactive")
    /// Image `icon_plus_red`.
    static let icon_plus_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_plus_red")
    /// Image `icon_portfolio_inactive`.
    static let icon_portfolio_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_portfolio_inactive")
    /// Image `icon_post_all_active`.
    static let icon_post_all_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_post_all_active")
    /// Image `icon_post_all_inactive`.
    static let icon_post_all_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_post_all_inactive")
    /// Image `icon_post_audio_active`.
    static let icon_post_audio_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_post_audio_active")
    /// Image `icon_post_audio_inactive`.
    static let icon_post_audio_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_post_audio_inactive")
    /// Image `icon_post_photo_active`.
    static let icon_post_photo_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_post_photo_active")
    /// Image `icon_post_photo_inactive`.
    static let icon_post_photo_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_post_photo_inactive")
    /// Image `icon_post_video_active`.
    static let icon_post_video_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_post_video_active")
    /// Image `icon_post_video_inactive`.
    static let icon_post_video_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_post_video_inactive")
    /// Image `icon_privacy_inactive`.
    static let icon_privacy_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_privacy_inactive")
    /// Image `icon_save_black`.
    static let icon_save_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_save_black")
    /// Image `icon_save_white`.
    static let icon_save_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_save_white")
    /// Image `icon_savings_inactive`.
    static let icon_savings_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_savings_inactive")
    /// Image `icon_savings_wallet`.
    static let icon_savings_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_savings_wallet")
    /// Image `icon_search_black`.
    static let icon_search_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search_black")
    /// Image `icon_search_friends`.
    static let icon_search_friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search_friends")
    /// Image `icon_search_white`.
    static let icon_search_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search_white")
    /// Image `icon_send`.
    static let icon_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_send")
    /// Image `icon_settings_active`.
    static let icon_settings_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_settings_active")
    /// Image `icon_settings_inactive`.
    static let icon_settings_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_settings_inactive")
    /// Image `icon_settings_rightarrow`.
    static let icon_settings_rightarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_settings_rightarrow")
    /// Image `icon_share`.
    static let icon_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share")
    /// Image `icon_social_active`.
    static let icon_social_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_social_active")
    /// Image `icon_social_home`.
    static let icon_social_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_social_home")
    /// Image `icon_social_inactive`.
    static let icon_social_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_social_inactive")
    /// Image `icon_social_livestream`.
    static let icon_social_livestream = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_social_livestream")
    /// Image `icon_switch_off_black`.
    static let icon_switch_off_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_switch_off_black")
    /// Image `icon_switch_off`.
    static let icon_switch_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_switch_off")
    /// Image `icon_switch_on_black`.
    static let icon_switch_on_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_switch_on_black")
    /// Image `icon_switch_on`.
    static let icon_switch_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_switch_on")
    /// Image `icon_travel_active`.
    static let icon_travel_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_travel_active")
    /// Image `icon_travel_inactive`.
    static let icon_travel_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_travel_inactive")
    /// Image `icon_triple_down`.
    static let icon_triple_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_triple_down")
    /// Image `icon_twitter_black`.
    static let icon_twitter_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_twitter_black")
    /// Image `icon_twitter`.
    static let icon_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_twitter")
    /// Image `icon_user_profile`.
    static let icon_user_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user_profile")
    /// Image `icon_videocall`.
    static let icon_videocall = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_videocall")
    /// Image `icon_wallet_active`.
    static let icon_wallet_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_active")
    /// Image `icon_wallet_inactive`.
    static let icon_wallet_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_inactive")
    /// Image `icon_wallet_request`.
    static let icon_wallet_request = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_request")
    /// Image `icon_wallet_send`.
    static let icon_wallet_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_send")
    /// Image `icon_wallet_topup`.
    static let icon_wallet_topup = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_topup")
    /// Image `img_avatar_empty`.
    static let img_avatar_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_avatar_empty")
    /// Image `img_avatar`.
    static let img_avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_avatar")
    /// Image `img_bankaccount`.
    static let img_bankaccount = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_bankaccount")
    /// Image `img_bevywallet_black`.
    static let img_bevywallet_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_bevywallet_black")
    /// Image `img_bevywallet`.
    static let img_bevywallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_bevywallet")
    /// Image `img_camera`.
    static let img_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_camera")
    /// Image `img_card_report`.
    static let img_card_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_card_report")
    /// Image `img_card_settings`.
    static let img_card_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_card_settings")
    /// Image `img_card_transaction`.
    static let img_card_transaction = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_card_transaction")
    /// Image `img_cardaddsuccess`.
    static let img_cardaddsuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_cardaddsuccess")
    /// Image `img_cardscan`.
    static let img_cardscan = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_cardscan")
    /// Image `img_comment_content`.
    static let img_comment_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_comment_content")
    /// Image `img_discover_content1`.
    static let img_discover_content1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_discover_content1")
    /// Image `img_discover_content2`.
    static let img_discover_content2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_discover_content2")
    /// Image `img_discover_content3`.
    static let img_discover_content3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_discover_content3")
    /// Image `img_discover_content4`.
    static let img_discover_content4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_discover_content4")
    /// Image `img_discover_content5`.
    static let img_discover_content5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_discover_content5")
    /// Image `img_dmdirect`.
    static let img_dmdirect = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_dmdirect")
    /// Image `img_dms_content`.
    static let img_dms_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_dms_content")
    /// Image `img_driver_content`.
    static let img_driver_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_driver_content")
    /// Image `img_facebook_connect`.
    static let img_facebook_connect = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_facebook_connect")
    /// Image `img_feed_content`.
    static let img_feed_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_feed_content")
    /// Image `img_feed_photo01`.
    static let img_feed_photo01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_feed_photo01")
    /// Image `img_feed_photo02`.
    static let img_feed_photo02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_feed_photo02")
    /// Image `img_feed_photo03`.
    static let img_feed_photo03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_feed_photo03")
    /// Image `img_feed_users`.
    static let img_feed_users = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_feed_users")
    /// Image `img_feed_video01`.
    static let img_feed_video01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_feed_video01")
    /// Image `img_flights_info`.
    static let img_flights_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_flights_info")
    /// Image `img_flights_path`.
    static let img_flights_path = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_flights_path")
    /// Image `img_flights_results`.
    static let img_flights_results = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_flights_results")
    /// Image `img_flights_title`.
    static let img_flights_title = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_flights_title")
    /// Image `img_hotel_content2`.
    static let img_hotel_content2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_hotel_content2")
    /// Image `img_hotel_content3`.
    static let img_hotel_content3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_hotel_content3")
    /// Image `img_hotel_content`.
    static let img_hotel_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_hotel_content")
    /// Image `img_hotel_info`.
    static let img_hotel_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_hotel_info")
    /// Image `img_instagram_connect`.
    static let img_instagram_connect = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_instagram_connect")
    /// Image `img_invitefriend_content`.
    static let img_invitefriend_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_invitefriend_content")
    /// Image `img_livestream_info`.
    static let img_livestream_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_livestream_info")
    /// Image `img_livestream_list`.
    static let img_livestream_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_livestream_list")
    /// Image `img_logo_black`.
    static let img_logo_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_logo_black")
    /// Image `img_logo_white`.
    static let img_logo_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_logo_white")
    /// Image `img_main_title`.
    static let img_main_title = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_main_title")
    /// Image `img_message_confirm`.
    static let img_message_confirm = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_message_confirm")
    /// Image `img_notification_content`.
    static let img_notification_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_notification_content")
    /// Image `img_plus_card`.
    static let img_plus_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_plus_card")
    /// Image `img_post_all_content`.
    static let img_post_all_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_post_all_content")
    /// Image `img_post_audio_content`.
    static let img_post_audio_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_post_audio_content")
    /// Image `img_post_photo_content`.
    static let img_post_photo_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_post_photo_content")
    /// Image `img_post_video_content`.
    static let img_post_video_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_post_video_content")
    /// Image `img_postinfo`.
    static let img_postinfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_postinfo")
    /// Image `img_savings_pig`.
    static let img_savings_pig = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_savings_pig")
    /// Image `img_social_header`.
    static let img_social_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_social_header")
    /// Image `img_social_links`.
    static let img_social_links = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_social_links")
    /// Image `img_social_live`.
    static let img_social_live = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_social_live")
    /// Image `img_social_post`.
    static let img_social_post = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_social_post")
    /// Image `img_starbucks`.
    static let img_starbucks = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_starbucks")
    /// Image `img_title_black`.
    static let img_title_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_title_black")
    /// Image `img_title_white`.
    static let img_title_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_title_white")
    /// Image `img_topup_success`.
    static let img_topup_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_topup_success")
    /// Image `img_transaction_map`.
    static let img_transaction_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_transaction_map")
    /// Image `img_transaction_success`.
    static let img_transaction_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_transaction_success")
    /// Image `img_travel_list`.
    static let img_travel_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_travel_list")
    /// Image `img_twitter_connect`.
    static let img_twitter_connect = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_twitter_connect")
    /// Image `img_user_avatar01`.
    static let img_user_avatar01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_avatar01")
    /// Image `img_user_avatar02`.
    static let img_user_avatar02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_avatar02")
    /// Image `img_user_avatar03`.
    static let img_user_avatar03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_avatar03")
    /// Image `img_user_avatar04`.
    static let img_user_avatar04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_avatar04")
    /// Image `img_user_avatar05`.
    static let img_user_avatar05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_avatar05")
    /// Image `img_user_avatar06`.
    static let img_user_avatar06 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_avatar06")
    /// Image `img_user_photo01`.
    static let img_user_photo01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_photo01")
    /// Image `img_user_photo02`.
    static let img_user_photo02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_photo02")
    /// Image `img_user_photo03`.
    static let img_user_photo03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_photo03")
    /// Image `img_user_photo04`.
    static let img_user_photo04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_photo04")
    /// Image `img_user_photo05`.
    static let img_user_photo05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_photo05")
    /// Image `img_user_photo06`.
    static let img_user_photo06 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_photo06")
    /// Image `img_wallet_contact_content`.
    static let img_wallet_contact_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_wallet_contact_content")
    /// Image `img_wallet_contacts`.
    static let img_wallet_contacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_wallet_contacts")
    /// Image `img_wallet_footer`.
    static let img_wallet_footer = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_wallet_footer")
    /// Image `img_wallet_graph`.
    static let img_wallet_graph = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_wallet_graph")
    /// Image `img_walletaccounts`.
    static let img_walletaccounts = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_walletaccounts")
    /// Image `screen_hotel_checkout`.
    static let screen_hotel_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "screen_hotel_checkout")
    /// Image `screen_hotel_receipt`.
    static let screen_hotel_receipt = Rswift.ImageResource(bundle: R.hostingBundle, name: "screen_hotel_receipt")
    /// Image `screen_property_profile`.
    static let screen_property_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "screen_property_profile")
    /// Image `screen_wallet_portfolio`.
    static let screen_wallet_portfolio = Rswift.ImageResource(bundle: R.hostingBundle, name: "screen_wallet_portfolio")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CleanBackground", bundle: ..., traitCollection: ...)`
    static func cleanBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cleanBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DriverScreen", bundle: ..., traitCollection: ...)`
    static func driverScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.driverScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DriverSearchScreen", bundle: ..., traitCollection: ...)`
    static func driverSearchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.driverSearchScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FeedLivestreamScreen", bundle: ..., traitCollection: ...)`
    static func feedLivestreamScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedLivestreamScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FeedPostScreen", bundle: ..., traitCollection: ...)`
    static func feedPostScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedPostScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FindRideScreen", bundle: ..., traitCollection: ...)`
    static func findRideScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findRideScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginOnboarding01", bundle: ..., traitCollection: ...)`
    static func loginOnboarding01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginOnboarding01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginOnboarding02", bundle: ..., traitCollection: ...)`
    static func loginOnboarding02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginOnboarding02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginOnboarding03", bundle: ..., traitCollection: ...)`
    static func loginOnboarding03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginOnboarding03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginOnboarding04", bundle: ..., traitCollection: ...)`
    static func loginOnboarding04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginOnboarding04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginWithScreen", bundle: ..., traitCollection: ...)`
    static func loginWithScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginWithScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginWithScreen1", bundle: ..., traitCollection: ...)`
    static func loginWithScreen1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginWithScreen1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginWithScreen2", bundle: ..., traitCollection: ...)`
    static func loginWithScreen2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginWithScreen2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnboardingScreen1", bundle: ..., traitCollection: ...)`
    static func onboardingScreen1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingScreen1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnboardingScreen2", bundle: ..., traitCollection: ...)`
    static func onboardingScreen2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingScreen2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnboardingScreen3", bundle: ..., traitCollection: ...)`
    static func onboardingScreen3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingScreen3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnboardingScreen4", bundle: ..., traitCollection: ...)`
    static func onboardingScreen4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingScreen4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnboardingScreen5", bundle: ..., traitCollection: ...)`
    static func onboardingScreen5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingScreen5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SocialScreen", bundle: ..., traitCollection: ...)`
    static func socialScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.socialScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SplashScreen", bundle: ..., traitCollection: ...)`
    static func splashScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VideoCallScreen", bundle: ..., traitCollection: ...)`
    static func videoCallScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoCallScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WalletBackground", bundle: ..., traitCollection: ...)`
    static func walletBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WalletDashboardScreen", bundle: ..., traitCollection: ...)`
    static func walletDashboardScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletDashboardScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WalletHomeScreen", bundle: ..., traitCollection: ...)`
    static func walletHomeScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletHomeScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WalletPlusWelcomeScreen", bundle: ..., traitCollection: ...)`
    static func walletPlusWelcomeScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletPlusWelcomeScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WelcomeScreen", bundle: ..., traitCollection: ...)`
    static func welcomeScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcomeScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_account_white", bundle: ..., traitCollection: ...)`
    static func icon_account_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_account_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_add_card", bundle: ..., traitCollection: ...)`
    static func icon_add_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_add_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_add_circle", bundle: ..., traitCollection: ...)`
    static func icon_add_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_add_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_added_red", bundle: ..., traitCollection: ...)`
    static func icon_added_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_added_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_alarm_noti", bundle: ..., traitCollection: ...)`
    static func icon_alarm_noti(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_alarm_noti, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_apple", bundle: ..., traitCollection: ...)`
    static func icon_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_black", bundle: ..., traitCollection: ...)`
    static func icon_arrow_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_white", bundle: ..., traitCollection: ...)`
    static func icon_arrow_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrowdown_black", bundle: ..., traitCollection: ...)`
    static func icon_arrowdown_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrowdown_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrowupload_white", bundle: ..., traitCollection: ...)`
    static func icon_arrowupload_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrowupload_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bell_white", bundle: ..., traitCollection: ...)`
    static func icon_bell_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bell_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_calendar", bundle: ..., traitCollection: ...)`
    static func icon_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_chat", bundle: ..., traitCollection: ...)`
    static func icon_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_checkbox_off", bundle: ..., traitCollection: ...)`
    static func icon_checkbox_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_checkbox_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_checkbox_on", bundle: ..., traitCollection: ...)`
    static func icon_checkbox_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_checkbox_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_checked", bundle: ..., traitCollection: ...)`
    static func icon_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_checked_black", bundle: ..., traitCollection: ...)`
    static func icon_checked_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_checked_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_chip_white", bundle: ..., traitCollection: ...)`
    static func icon_chip_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chip_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_close", bundle: ..., traitCollection: ...)`
    static func icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_close_black", bundle: ..., traitCollection: ...)`
    static func icon_close_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_close_red", bundle: ..., traitCollection: ...)`
    static func icon_close_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_closebutton", bundle: ..., traitCollection: ...)`
    static func icon_closebutton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_closebutton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_contact_plus", bundle: ..., traitCollection: ...)`
    static func icon_contact_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_contact_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_create_white", bundle: ..., traitCollection: ...)`
    static func icon_create_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_create_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_crypto_inactive", bundle: ..., traitCollection: ...)`
    static func icon_crypto_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_crypto_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_discover_active", bundle: ..., traitCollection: ...)`
    static func icon_discover_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_discover_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_discover_inactive", bundle: ..., traitCollection: ...)`
    static func icon_discover_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_discover_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dm", bundle: ..., traitCollection: ...)`
    static func icon_dm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_down_red", bundle: ..., traitCollection: ...)`
    static func icon_down_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_down_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_driver_inactive", bundle: ..., traitCollection: ...)`
    static func icon_driver_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_driver_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eye_black", bundle: ..., traitCollection: ...)`
    static func icon_eye_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eye_white", bundle: ..., traitCollection: ...)`
    static func icon_eye_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_facebook", bundle: ..., traitCollection: ...)`
    static func icon_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_facebook_black", bundle: ..., traitCollection: ...)`
    static func icon_facebook_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_facebook_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_google", bundle: ..., traitCollection: ...)`
    static func icon_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_greendownarrow", bundle: ..., traitCollection: ...)`
    static func icon_greendownarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_greendownarrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_heart", bundle: ..., traitCollection: ...)`
    static func icon_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_heart_black", bundle: ..., traitCollection: ...)`
    static func icon_heart_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_heart_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_heart_white", bundle: ..., traitCollection: ...)`
    static func icon_heart_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_heart_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_help_inactive", bundle: ..., traitCollection: ...)`
    static func icon_help_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_help_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_hotels_inactive", bundle: ..., traitCollection: ...)`
    static func icon_hotels_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_hotels_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_instagram_black", bundle: ..., traitCollection: ...)`
    static func icon_instagram_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_instagram_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_logout", bundle: ..., traitCollection: ...)`
    static func icon_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mail", bundle: ..., traitCollection: ...)`
    static func icon_mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mail_black", bundle: ..., traitCollection: ...)`
    static func icon_mail_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mail_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu", bundle: ..., traitCollection: ...)`
    static func icon_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_black", bundle: ..., traitCollection: ...)`
    static func icon_menu_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more", bundle: ..., traitCollection: ...)`
    static func icon_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more_black", bundle: ..., traitCollection: ...)`
    static func icon_more_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more_rect", bundle: ..., traitCollection: ...)`
    static func icon_more_rect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more_rect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_msg", bundle: ..., traitCollection: ...)`
    static func icon_msg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_msg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_msg_black", bundle: ..., traitCollection: ...)`
    static func icon_msg_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_msg_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_new_post", bundle: ..., traitCollection: ...)`
    static func icon_new_post(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_new_post, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_p2p_inactive", bundle: ..., traitCollection: ...)`
    static func icon_p2p_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_p2p_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_plus_red", bundle: ..., traitCollection: ...)`
    static func icon_plus_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_plus_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_portfolio_inactive", bundle: ..., traitCollection: ...)`
    static func icon_portfolio_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_portfolio_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_post_all_active", bundle: ..., traitCollection: ...)`
    static func icon_post_all_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_post_all_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_post_all_inactive", bundle: ..., traitCollection: ...)`
    static func icon_post_all_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_post_all_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_post_audio_active", bundle: ..., traitCollection: ...)`
    static func icon_post_audio_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_post_audio_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_post_audio_inactive", bundle: ..., traitCollection: ...)`
    static func icon_post_audio_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_post_audio_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_post_photo_active", bundle: ..., traitCollection: ...)`
    static func icon_post_photo_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_post_photo_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_post_photo_inactive", bundle: ..., traitCollection: ...)`
    static func icon_post_photo_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_post_photo_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_post_video_active", bundle: ..., traitCollection: ...)`
    static func icon_post_video_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_post_video_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_post_video_inactive", bundle: ..., traitCollection: ...)`
    static func icon_post_video_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_post_video_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_privacy_inactive", bundle: ..., traitCollection: ...)`
    static func icon_privacy_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_privacy_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_save_black", bundle: ..., traitCollection: ...)`
    static func icon_save_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_save_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_save_white", bundle: ..., traitCollection: ...)`
    static func icon_save_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_save_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_savings_inactive", bundle: ..., traitCollection: ...)`
    static func icon_savings_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_savings_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_savings_wallet", bundle: ..., traitCollection: ...)`
    static func icon_savings_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_savings_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search_black", bundle: ..., traitCollection: ...)`
    static func icon_search_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search_friends", bundle: ..., traitCollection: ...)`
    static func icon_search_friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search_friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search_white", bundle: ..., traitCollection: ...)`
    static func icon_search_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_send", bundle: ..., traitCollection: ...)`
    static func icon_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_settings_active", bundle: ..., traitCollection: ...)`
    static func icon_settings_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settings_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_settings_inactive", bundle: ..., traitCollection: ...)`
    static func icon_settings_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settings_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_settings_rightarrow", bundle: ..., traitCollection: ...)`
    static func icon_settings_rightarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settings_rightarrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share", bundle: ..., traitCollection: ...)`
    static func icon_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_social_active", bundle: ..., traitCollection: ...)`
    static func icon_social_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_social_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_social_home", bundle: ..., traitCollection: ...)`
    static func icon_social_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_social_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_social_inactive", bundle: ..., traitCollection: ...)`
    static func icon_social_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_social_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_social_livestream", bundle: ..., traitCollection: ...)`
    static func icon_social_livestream(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_social_livestream, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_switch_off", bundle: ..., traitCollection: ...)`
    static func icon_switch_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_switch_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_switch_off_black", bundle: ..., traitCollection: ...)`
    static func icon_switch_off_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_switch_off_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_switch_on", bundle: ..., traitCollection: ...)`
    static func icon_switch_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_switch_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_switch_on_black", bundle: ..., traitCollection: ...)`
    static func icon_switch_on_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_switch_on_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_travel_active", bundle: ..., traitCollection: ...)`
    static func icon_travel_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_travel_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_travel_inactive", bundle: ..., traitCollection: ...)`
    static func icon_travel_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_travel_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_triple_down", bundle: ..., traitCollection: ...)`
    static func icon_triple_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_triple_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_twitter", bundle: ..., traitCollection: ...)`
    static func icon_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_twitter_black", bundle: ..., traitCollection: ...)`
    static func icon_twitter_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_twitter_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_user_profile", bundle: ..., traitCollection: ...)`
    static func icon_user_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_videocall", bundle: ..., traitCollection: ...)`
    static func icon_videocall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_videocall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_active", bundle: ..., traitCollection: ...)`
    static func icon_wallet_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_inactive", bundle: ..., traitCollection: ...)`
    static func icon_wallet_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_request", bundle: ..., traitCollection: ...)`
    static func icon_wallet_request(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_request, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_send", bundle: ..., traitCollection: ...)`
    static func icon_wallet_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_topup", bundle: ..., traitCollection: ...)`
    static func icon_wallet_topup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_topup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_avatar", bundle: ..., traitCollection: ...)`
    static func img_avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_avatar_empty", bundle: ..., traitCollection: ...)`
    static func img_avatar_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_avatar_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_bankaccount", bundle: ..., traitCollection: ...)`
    static func img_bankaccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_bankaccount, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_bevywallet", bundle: ..., traitCollection: ...)`
    static func img_bevywallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_bevywallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_bevywallet_black", bundle: ..., traitCollection: ...)`
    static func img_bevywallet_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_bevywallet_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_camera", bundle: ..., traitCollection: ...)`
    static func img_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_card_report", bundle: ..., traitCollection: ...)`
    static func img_card_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_card_report, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_card_settings", bundle: ..., traitCollection: ...)`
    static func img_card_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_card_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_card_transaction", bundle: ..., traitCollection: ...)`
    static func img_card_transaction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_card_transaction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_cardaddsuccess", bundle: ..., traitCollection: ...)`
    static func img_cardaddsuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_cardaddsuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_cardscan", bundle: ..., traitCollection: ...)`
    static func img_cardscan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_cardscan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_comment_content", bundle: ..., traitCollection: ...)`
    static func img_comment_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_comment_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_discover_content1", bundle: ..., traitCollection: ...)`
    static func img_discover_content1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_discover_content1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_discover_content2", bundle: ..., traitCollection: ...)`
    static func img_discover_content2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_discover_content2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_discover_content3", bundle: ..., traitCollection: ...)`
    static func img_discover_content3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_discover_content3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_discover_content4", bundle: ..., traitCollection: ...)`
    static func img_discover_content4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_discover_content4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_discover_content5", bundle: ..., traitCollection: ...)`
    static func img_discover_content5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_discover_content5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_dmdirect", bundle: ..., traitCollection: ...)`
    static func img_dmdirect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_dmdirect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_dms_content", bundle: ..., traitCollection: ...)`
    static func img_dms_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_dms_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_driver_content", bundle: ..., traitCollection: ...)`
    static func img_driver_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_driver_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_facebook_connect", bundle: ..., traitCollection: ...)`
    static func img_facebook_connect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_facebook_connect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_feed_content", bundle: ..., traitCollection: ...)`
    static func img_feed_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_feed_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_feed_photo01", bundle: ..., traitCollection: ...)`
    static func img_feed_photo01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_feed_photo01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_feed_photo02", bundle: ..., traitCollection: ...)`
    static func img_feed_photo02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_feed_photo02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_feed_photo03", bundle: ..., traitCollection: ...)`
    static func img_feed_photo03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_feed_photo03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_feed_users", bundle: ..., traitCollection: ...)`
    static func img_feed_users(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_feed_users, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_feed_video01", bundle: ..., traitCollection: ...)`
    static func img_feed_video01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_feed_video01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_flights_info", bundle: ..., traitCollection: ...)`
    static func img_flights_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_flights_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_flights_path", bundle: ..., traitCollection: ...)`
    static func img_flights_path(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_flights_path, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_flights_results", bundle: ..., traitCollection: ...)`
    static func img_flights_results(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_flights_results, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_flights_title", bundle: ..., traitCollection: ...)`
    static func img_flights_title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_flights_title, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_hotel_content", bundle: ..., traitCollection: ...)`
    static func img_hotel_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_hotel_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_hotel_content2", bundle: ..., traitCollection: ...)`
    static func img_hotel_content2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_hotel_content2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_hotel_content3", bundle: ..., traitCollection: ...)`
    static func img_hotel_content3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_hotel_content3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_hotel_info", bundle: ..., traitCollection: ...)`
    static func img_hotel_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_hotel_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_instagram_connect", bundle: ..., traitCollection: ...)`
    static func img_instagram_connect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_instagram_connect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_invitefriend_content", bundle: ..., traitCollection: ...)`
    static func img_invitefriend_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_invitefriend_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_livestream_info", bundle: ..., traitCollection: ...)`
    static func img_livestream_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_livestream_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_livestream_list", bundle: ..., traitCollection: ...)`
    static func img_livestream_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_livestream_list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_logo_black", bundle: ..., traitCollection: ...)`
    static func img_logo_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_logo_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_logo_white", bundle: ..., traitCollection: ...)`
    static func img_logo_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_logo_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_main_title", bundle: ..., traitCollection: ...)`
    static func img_main_title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_main_title, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_message_confirm", bundle: ..., traitCollection: ...)`
    static func img_message_confirm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_message_confirm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_notification_content", bundle: ..., traitCollection: ...)`
    static func img_notification_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_notification_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_plus_card", bundle: ..., traitCollection: ...)`
    static func img_plus_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_plus_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_post_all_content", bundle: ..., traitCollection: ...)`
    static func img_post_all_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_post_all_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_post_audio_content", bundle: ..., traitCollection: ...)`
    static func img_post_audio_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_post_audio_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_post_photo_content", bundle: ..., traitCollection: ...)`
    static func img_post_photo_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_post_photo_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_post_video_content", bundle: ..., traitCollection: ...)`
    static func img_post_video_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_post_video_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_postinfo", bundle: ..., traitCollection: ...)`
    static func img_postinfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_postinfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_savings_pig", bundle: ..., traitCollection: ...)`
    static func img_savings_pig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_savings_pig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_social_header", bundle: ..., traitCollection: ...)`
    static func img_social_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_social_header, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_social_links", bundle: ..., traitCollection: ...)`
    static func img_social_links(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_social_links, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_social_live", bundle: ..., traitCollection: ...)`
    static func img_social_live(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_social_live, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_social_post", bundle: ..., traitCollection: ...)`
    static func img_social_post(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_social_post, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_starbucks", bundle: ..., traitCollection: ...)`
    static func img_starbucks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_starbucks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_title_black", bundle: ..., traitCollection: ...)`
    static func img_title_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_title_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_title_white", bundle: ..., traitCollection: ...)`
    static func img_title_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_title_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_topup_success", bundle: ..., traitCollection: ...)`
    static func img_topup_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_topup_success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_transaction_map", bundle: ..., traitCollection: ...)`
    static func img_transaction_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_transaction_map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_transaction_success", bundle: ..., traitCollection: ...)`
    static func img_transaction_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_transaction_success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_travel_list", bundle: ..., traitCollection: ...)`
    static func img_travel_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_travel_list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_twitter_connect", bundle: ..., traitCollection: ...)`
    static func img_twitter_connect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_twitter_connect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_avatar01", bundle: ..., traitCollection: ...)`
    static func img_user_avatar01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_avatar01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_avatar02", bundle: ..., traitCollection: ...)`
    static func img_user_avatar02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_avatar02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_avatar03", bundle: ..., traitCollection: ...)`
    static func img_user_avatar03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_avatar03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_avatar04", bundle: ..., traitCollection: ...)`
    static func img_user_avatar04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_avatar04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_avatar05", bundle: ..., traitCollection: ...)`
    static func img_user_avatar05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_avatar05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_avatar06", bundle: ..., traitCollection: ...)`
    static func img_user_avatar06(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_avatar06, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_photo01", bundle: ..., traitCollection: ...)`
    static func img_user_photo01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_photo01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_photo02", bundle: ..., traitCollection: ...)`
    static func img_user_photo02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_photo02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_photo03", bundle: ..., traitCollection: ...)`
    static func img_user_photo03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_photo03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_photo04", bundle: ..., traitCollection: ...)`
    static func img_user_photo04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_photo04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_photo05", bundle: ..., traitCollection: ...)`
    static func img_user_photo05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_photo05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_photo06", bundle: ..., traitCollection: ...)`
    static func img_user_photo06(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_photo06, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_wallet_contact_content", bundle: ..., traitCollection: ...)`
    static func img_wallet_contact_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_wallet_contact_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_wallet_contacts", bundle: ..., traitCollection: ...)`
    static func img_wallet_contacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_wallet_contacts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_wallet_footer", bundle: ..., traitCollection: ...)`
    static func img_wallet_footer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_wallet_footer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_wallet_graph", bundle: ..., traitCollection: ...)`
    static func img_wallet_graph(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_wallet_graph, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_walletaccounts", bundle: ..., traitCollection: ...)`
    static func img_walletaccounts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_walletaccounts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screen_hotel_checkout", bundle: ..., traitCollection: ...)`
    static func screen_hotel_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screen_hotel_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screen_hotel_receipt", bundle: ..., traitCollection: ...)`
    static func screen_hotel_receipt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screen_hotel_receipt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screen_property_profile", bundle: ..., traitCollection: ...)`
    static func screen_property_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screen_property_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screen_wallet_portfolio", bundle: ..., traitCollection: ...)`
    static func screen_wallet_portfolio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screen_wallet_portfolio, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `AddContactItemTableViewCell`.
    static let addContactItemTableViewCell = _R.nib._AddContactItemTableViewCell()
    /// Nib `ContactItemTableViewCell`.
    static let contactItemTableViewCell = _R.nib._ContactItemTableViewCell()
    /// Nib `FollowFriendTableViewCell`.
    static let followFriendTableViewCell = _R.nib._FollowFriendTableViewCell()
    /// Nib `LeftMenuTableViewCell`.
    static let leftMenuTableViewCell = _R.nib._LeftMenuTableViewCell()
    /// Nib `MainHeaderView`.
    static let mainHeaderView = _R.nib._MainHeaderView()
    /// Nib `PhotoFeedTableViewCell`.
    static let photoFeedTableViewCell = _R.nib._PhotoFeedTableViewCell()
    /// Nib `RightMenuTableViewCell`.
    static let rightMenuTableViewCell = _R.nib._RightMenuTableViewCell()
    /// Nib `SavingsHeaderTableViewCell`.
    static let savingsHeaderTableViewCell = _R.nib._SavingsHeaderTableViewCell()
    /// Nib `SavingsTableViewCell`.
    static let savingsTableViewCell = _R.nib._SavingsTableViewCell()
    /// Nib `TransactionTableViewCell`.
    static let transactionTableViewCell = _R.nib._TransactionTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddContactItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addContactItemTableViewCell) instead")
    static func addContactItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addContactItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ContactItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contactItemTableViewCell) instead")
    static func contactItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FollowFriendTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.followFriendTableViewCell) instead")
    static func followFriendTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.followFriendTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LeftMenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.leftMenuTableViewCell) instead")
    static func leftMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leftMenuTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainHeaderView) instead")
    static func mainHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PhotoFeedTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photoFeedTableViewCell) instead")
    static func photoFeedTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoFeedTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RightMenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rightMenuTableViewCell) instead")
    static func rightMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rightMenuTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SavingsHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.savingsHeaderTableViewCell) instead")
    static func savingsHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.savingsHeaderTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SavingsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.savingsTableViewCell) instead")
    static func savingsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.savingsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionTableViewCell) instead")
    static func transactionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionTableViewCell)
    }
    #endif

    static func addContactItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddContactItemTableViewCell? {
      return R.nib.addContactItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddContactItemTableViewCell
    }

    static func contactItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactItemTableViewCell? {
      return R.nib.contactItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactItemTableViewCell
    }

    static func followFriendTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FollowFriendTableViewCell? {
      return R.nib.followFriendTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FollowFriendTableViewCell
    }

    static func leftMenuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftMenuTableViewCell? {
      return R.nib.leftMenuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftMenuTableViewCell
    }

    static func mainHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mainHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func photoFeedTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoFeedTableViewCell? {
      return R.nib.photoFeedTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoFeedTableViewCell
    }

    static func rightMenuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RightMenuTableViewCell? {
      return R.nib.rightMenuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RightMenuTableViewCell
    }

    static func savingsHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SavingsHeaderTableViewCell? {
      return R.nib.savingsHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SavingsHeaderTableViewCell
    }

    static func savingsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SavingsTableViewCell? {
      return R.nib.savingsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SavingsTableViewCell
    }

    static func transactionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
      return R.nib.transactionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddContactItemTableViewCell`.
    static let addContactItemTableViewCell: Rswift.ReuseIdentifier<AddContactItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "AddContactItemTableViewCell")
    /// Reuse identifier `ContactItemTableViewCell`.
    static let contactItemTableViewCell: Rswift.ReuseIdentifier<ContactItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "ContactItemTableViewCell")
    /// Reuse identifier `FollowFriendTableViewCell`.
    static let followFriendTableViewCell: Rswift.ReuseIdentifier<FollowFriendTableViewCell> = Rswift.ReuseIdentifier(identifier: "FollowFriendTableViewCell")
    /// Reuse identifier `LeftMenuTableViewCell`.
    static let leftMenuTableViewCell: Rswift.ReuseIdentifier<LeftMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "LeftMenuTableViewCell")
    /// Reuse identifier `PhotoFeedTableViewCell`.
    static let photoFeedTableViewCell: Rswift.ReuseIdentifier<PhotoFeedTableViewCell> = Rswift.ReuseIdentifier(identifier: "PhotoFeedTableViewCell")
    /// Reuse identifier `RightMenuTableViewCell`.
    static let rightMenuTableViewCell: Rswift.ReuseIdentifier<RightMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "RightMenuTableViewCell")
    /// Reuse identifier `SavingsHeaderTableViewCell`.
    static let savingsHeaderTableViewCell: Rswift.ReuseIdentifier<SavingsHeaderTableViewCell> = Rswift.ReuseIdentifier(identifier: "SavingsHeaderTableViewCell")
    /// Reuse identifier `SavingsTableViewCell`.
    static let savingsTableViewCell: Rswift.ReuseIdentifier<SavingsTableViewCell> = Rswift.ReuseIdentifier(identifier: "SavingsTableViewCell")
    /// Reuse identifier `TransactionTableViewCell`.
    static let transactionTableViewCell: Rswift.ReuseIdentifier<TransactionTableViewCell> = Rswift.ReuseIdentifier(identifier: "TransactionTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddContactItemTableViewCell.validate()
      try _ContactItemTableViewCell.validate()
      try _FollowFriendTableViewCell.validate()
      try _LeftMenuTableViewCell.validate()
      try _PhotoFeedTableViewCell.validate()
      try _RightMenuTableViewCell.validate()
      try _SavingsTableViewCell.validate()
    }

    struct _AddContactItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddContactItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "AddContactItemTableViewCell"
      let name = "AddContactItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddContactItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddContactItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_added_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_added_red' is used in nib 'AddContactItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_avatar_empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar_empty' is used in nib 'AddContactItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ContactItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ContactItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ContactItemTableViewCell"
      let name = "ContactItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar' is used in nib 'ContactItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FollowFriendTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FollowFriendTableViewCell

      let bundle = R.hostingBundle
      let identifier = "FollowFriendTableViewCell"
      let name = "FollowFriendTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FollowFriendTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FollowFriendTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar' is used in nib 'FollowFriendTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LeftMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LeftMenuTableViewCell

      let bundle = R.hostingBundle
      let identifier = "LeftMenuTableViewCell"
      let name = "LeftMenuTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftMenuTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_discover_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_discover_inactive' is used in nib 'LeftMenuTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MainHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MainHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PhotoFeedTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PhotoFeedTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PhotoFeedTableViewCell"
      let name = "PhotoFeedTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoFeedTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoFeedTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_dm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dm' is used in nib 'PhotoFeedTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_heart' is used in nib 'PhotoFeedTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_msg_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_msg_black' is used in nib 'PhotoFeedTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar' is used in nib 'PhotoFeedTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_feed_photo01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_feed_photo01' is used in nib 'PhotoFeedTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RightMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RightMenuTableViewCell

      let bundle = R.hostingBundle
      let identifier = "RightMenuTableViewCell"
      let name = "RightMenuTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RightMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RightMenuTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_discover_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_discover_inactive' is used in nib 'RightMenuTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SavingsHeaderTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SavingsHeaderTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SavingsHeaderTableViewCell"
      let name = "SavingsHeaderTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SavingsHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SavingsHeaderTableViewCell
      }

      fileprivate init() {}
    }

    struct _SavingsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SavingsTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SavingsTableViewCell"
      let name = "SavingsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SavingsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SavingsTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_savings_wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_savings_wallet' is used in nib 'SavingsTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TransactionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TransactionTableViewCell

      let bundle = R.hostingBundle
      let identifier = "TransactionTableViewCell"
      let name = "TransactionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try auth.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try menu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try social.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sub.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try wallet.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct auth: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let loginWithViewController = StoryboardViewControllerResource<LoginWithViewController>(identifier: "LoginWithViewController")
      let name = "Auth"
      let newPwdViewController = StoryboardViewControllerResource<NewPwdViewController>(identifier: "NewPwdViewController")
      let onboardingViewController = StoryboardViewControllerResource<OnboardingViewController>(identifier: "OnboardingViewController")
      let resetCodeViewController = StoryboardViewControllerResource<ResetCodeViewController>(identifier: "ResetCodeViewController")
      let resetPwdViewController = StoryboardViewControllerResource<ResetPwdViewController>(identifier: "ResetPwdViewController")
      let signupViewController = StoryboardViewControllerResource<SignupViewController>(identifier: "SignupViewController")
      let welcomeViewController = StoryboardViewControllerResource<WelcomeViewController>(identifier: "WelcomeViewController")

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func loginWithViewController(_: Void = ()) -> LoginWithViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginWithViewController)
      }

      func newPwdViewController(_: Void = ()) -> NewPwdViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newPwdViewController)
      }

      func onboardingViewController(_: Void = ()) -> OnboardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingViewController)
      }

      func resetCodeViewController(_: Void = ()) -> ResetCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetCodeViewController)
      }

      func resetPwdViewController(_: Void = ()) -> ResetPwdViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPwdViewController)
      }

      func signupViewController(_: Void = ()) -> SignupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupViewController)
      }

      func welcomeViewController(_: Void = ()) -> WelcomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CleanBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CleanBackground' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WelcomeScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WelcomeScreen' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_arrow_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow_black' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_arrowdown_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrowdown_black' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_checkbox_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_checkbox_off' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_checked_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_checked_black' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_eye_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eye_black' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_facebook' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_google' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_mail_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_mail_black' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_switch_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_switch_off' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_twitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_twitter' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_avatar_empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar_empty' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_black' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_title_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_title_black' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_title_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_title_white' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.auth().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Auth' as 'LoginViewController'.") }
        if _R.storyboard.auth().loginWithViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginWithViewController' could not be loaded from storyboard 'Auth' as 'LoginWithViewController'.") }
        if _R.storyboard.auth().newPwdViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newPwdViewController' could not be loaded from storyboard 'Auth' as 'NewPwdViewController'.") }
        if _R.storyboard.auth().onboardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingViewController' could not be loaded from storyboard 'Auth' as 'OnboardingViewController'.") }
        if _R.storyboard.auth().resetCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetCodeViewController' could not be loaded from storyboard 'Auth' as 'ResetCodeViewController'.") }
        if _R.storyboard.auth().resetPwdViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPwdViewController' could not be loaded from storyboard 'Auth' as 'ResetPwdViewController'.") }
        if _R.storyboard.auth().signupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupViewController' could not be loaded from storyboard 'Auth' as 'SignupViewController'.") }
        if _R.storyboard.auth().welcomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeViewController' could not be loaded from storyboard 'Auth' as 'WelcomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "SplashScreen.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SplashScreen.png' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct menu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let discoverViewController = StoryboardViewControllerResource<DiscoverViewController>(identifier: "DiscoverViewController")
      let leftMenuViewController = StoryboardViewControllerResource<LeftMenuViewController>(identifier: "LeftMenuViewController")
      let leftSideMenuNavigationController = StoryboardViewControllerResource<SideMenu.SideMenuNavigationController>(identifier: "LeftSideMenuNavigationController")
      let name = "Menu"
      let portfolioViewController = StoryboardViewControllerResource<PortfolioViewController>(identifier: "PortfolioViewController")
      let rightMenuViewController = StoryboardViewControllerResource<RightMenuViewController>(identifier: "RightMenuViewController")
      let rightSideMenuNavigationController = StoryboardViewControllerResource<SideMenu.SideMenuNavigationController>(identifier: "RightSideMenuNavigationController")
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      let socialViewController = StoryboardViewControllerResource<SocialViewController>(identifier: "SocialViewController")
      let travelViewController = StoryboardViewControllerResource<TravelViewController>(identifier: "TravelViewController")
      let walletViewController = StoryboardViewControllerResource<WalletViewController>(identifier: "WalletViewController")

      func discoverViewController(_: Void = ()) -> DiscoverViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: discoverViewController)
      }

      func leftMenuViewController(_: Void = ()) -> LeftMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftMenuViewController)
      }

      func leftSideMenuNavigationController(_: Void = ()) -> SideMenu.SideMenuNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftSideMenuNavigationController)
      }

      func portfolioViewController(_: Void = ()) -> PortfolioViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: portfolioViewController)
      }

      func rightMenuViewController(_: Void = ()) -> RightMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rightMenuViewController)
      }

      func rightSideMenuNavigationController(_: Void = ()) -> SideMenu.SideMenuNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rightSideMenuNavigationController)
      }

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      func socialViewController(_: Void = ()) -> SocialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialViewController)
      }

      func travelViewController(_: Void = ()) -> TravelViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: travelViewController)
      }

      func walletViewController(_: Void = ()) -> WalletViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "WalletBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WalletBackground' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_account_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_account_white' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_bell_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bell_white' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_greendownarrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_greendownarrow' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_logout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_logout' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu_black' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_more' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_more_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_more_black' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_new_post", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_new_post' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_search_friends", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_search_friends' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_settings_rightarrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_settings_rightarrow' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_social_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_social_home' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_social_livestream", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_social_livestream' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_switch_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_switch_off' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_switch_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_switch_on' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_user_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_user_profile' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_wallet_request", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_request' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_wallet_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_send' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_wallet_topup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_topup' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_bevywallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_bevywallet' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_black' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_white' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_travel_list", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_travel_list' is used in storyboard 'Menu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.menu().discoverViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'discoverViewController' could not be loaded from storyboard 'Menu' as 'DiscoverViewController'.") }
        if _R.storyboard.menu().leftMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftMenuViewController' could not be loaded from storyboard 'Menu' as 'LeftMenuViewController'.") }
        if _R.storyboard.menu().leftSideMenuNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftSideMenuNavigationController' could not be loaded from storyboard 'Menu' as 'SideMenu.SideMenuNavigationController'.") }
        if _R.storyboard.menu().portfolioViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'portfolioViewController' could not be loaded from storyboard 'Menu' as 'PortfolioViewController'.") }
        if _R.storyboard.menu().rightMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rightMenuViewController' could not be loaded from storyboard 'Menu' as 'RightMenuViewController'.") }
        if _R.storyboard.menu().rightSideMenuNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rightSideMenuNavigationController' could not be loaded from storyboard 'Menu' as 'SideMenu.SideMenuNavigationController'.") }
        if _R.storyboard.menu().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Menu' as 'SettingsViewController'.") }
        if _R.storyboard.menu().socialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialViewController' could not be loaded from storyboard 'Menu' as 'SocialViewController'.") }
        if _R.storyboard.menu().travelViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'travelViewController' could not be loaded from storyboard 'Menu' as 'TravelViewController'.") }
        if _R.storyboard.menu().walletViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletViewController' could not be loaded from storyboard 'Menu' as 'WalletViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct social: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addFeedViewController = StoryboardViewControllerResource<AddFeedViewController>(identifier: "AddFeedViewController")
      let bundle = R.hostingBundle
      let dmDirectViewController = StoryboardViewControllerResource<DMDirectViewController>(identifier: "DMDirectViewController")
      let feedLivestreamViewController = StoryboardViewControllerResource<FeedLivestreamViewController>(identifier: "FeedLivestreamViewController")
      let feedPostViewController = StoryboardViewControllerResource<FeedPostViewController>(identifier: "FeedPostViewController")
      let inviteFriendsViewController = StoryboardViewControllerResource<InviteFriendsViewController>(identifier: "InviteFriendsViewController")
      let name = "Social"
      let settingsNotificationsViewController = StoryboardViewControllerResource<SettingsNotificationsViewController>(identifier: "SettingsNotificationsViewController")
      let socialCommentsViewController = StoryboardViewControllerResource<SocialCommentsViewController>(identifier: "SocialCommentsViewController")
      let socialDmsViewController = StoryboardViewControllerResource<SocialDmsViewController>(identifier: "SocialDmsViewController")
      let socialFriendsViewController = StoryboardViewControllerResource<SocialFriendsViewController>(identifier: "SocialFriendsViewController")
      let socialHelpViewController = StoryboardViewControllerResource<SocialHelpViewController>(identifier: "SocialHelpViewController")
      let socialNotificationViewController = StoryboardViewControllerResource<SocialNotificationViewController>(identifier: "SocialNotificationViewController")
      let socialPrivacyViewController = StoryboardViewControllerResource<SocialPrivacyViewController>(identifier: "SocialPrivacyViewController")
      let socialProfileViewController = StoryboardViewControllerResource<SocialProfileViewController>(identifier: "SocialProfileViewController")
      let socialSettingsViewController = StoryboardViewControllerResource<SocialSettingsViewController>(identifier: "SocialSettingsViewController")
      let videoCallViewController = StoryboardViewControllerResource<VideoCallViewController>(identifier: "VideoCallViewController")

      func addFeedViewController(_: Void = ()) -> AddFeedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addFeedViewController)
      }

      func dmDirectViewController(_: Void = ()) -> DMDirectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dmDirectViewController)
      }

      func feedLivestreamViewController(_: Void = ()) -> FeedLivestreamViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedLivestreamViewController)
      }

      func feedPostViewController(_: Void = ()) -> FeedPostViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedPostViewController)
      }

      func inviteFriendsViewController(_: Void = ()) -> InviteFriendsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inviteFriendsViewController)
      }

      func settingsNotificationsViewController(_: Void = ()) -> SettingsNotificationsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsNotificationsViewController)
      }

      func socialCommentsViewController(_: Void = ()) -> SocialCommentsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialCommentsViewController)
      }

      func socialDmsViewController(_: Void = ()) -> SocialDmsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialDmsViewController)
      }

      func socialFriendsViewController(_: Void = ()) -> SocialFriendsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialFriendsViewController)
      }

      func socialHelpViewController(_: Void = ()) -> SocialHelpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialHelpViewController)
      }

      func socialNotificationViewController(_: Void = ()) -> SocialNotificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialNotificationViewController)
      }

      func socialPrivacyViewController(_: Void = ()) -> SocialPrivacyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialPrivacyViewController)
      }

      func socialProfileViewController(_: Void = ()) -> SocialProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialProfileViewController)
      }

      func socialSettingsViewController(_: Void = ()) -> SocialSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialSettingsViewController)
      }

      func videoCallViewController(_: Void = ()) -> VideoCallViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videoCallViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "FeedLivestreamScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FeedLivestreamScreen' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "FeedPostScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FeedPostScreen' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "VideoCallScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'VideoCallScreen' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WalletBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WalletBackground' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_account_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_account_white' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_alarm_noti", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_alarm_noti' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_arrow_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow_white' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_msg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_msg' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_new_post", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_new_post' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_privacy_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_privacy_inactive' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_search_friends", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_search_friends' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_send' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_settings_rightarrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_settings_rightarrow' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_social_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_social_home' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_social_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_social_inactive' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_social_livestream", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_social_livestream' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_user_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_user_profile' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_videocall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_videocall' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_avatar_empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar_empty' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_camera' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_comment_content", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_comment_content' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_dmdirect", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_dmdirect' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_dms_content", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_dms_content' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_invitefriend_content", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_invitefriend_content' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_livestream_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_livestream_info' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_livestream_list", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_livestream_list' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_white' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_message_confirm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_message_confirm' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_notification_content", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_notification_content' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_postinfo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_postinfo' is used in storyboard 'Social', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_social_header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_social_header' is used in storyboard 'Social', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.social().addFeedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addFeedViewController' could not be loaded from storyboard 'Social' as 'AddFeedViewController'.") }
        if _R.storyboard.social().dmDirectViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dmDirectViewController' could not be loaded from storyboard 'Social' as 'DMDirectViewController'.") }
        if _R.storyboard.social().feedLivestreamViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedLivestreamViewController' could not be loaded from storyboard 'Social' as 'FeedLivestreamViewController'.") }
        if _R.storyboard.social().feedPostViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedPostViewController' could not be loaded from storyboard 'Social' as 'FeedPostViewController'.") }
        if _R.storyboard.social().inviteFriendsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inviteFriendsViewController' could not be loaded from storyboard 'Social' as 'InviteFriendsViewController'.") }
        if _R.storyboard.social().settingsNotificationsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsNotificationsViewController' could not be loaded from storyboard 'Social' as 'SettingsNotificationsViewController'.") }
        if _R.storyboard.social().socialCommentsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialCommentsViewController' could not be loaded from storyboard 'Social' as 'SocialCommentsViewController'.") }
        if _R.storyboard.social().socialDmsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialDmsViewController' could not be loaded from storyboard 'Social' as 'SocialDmsViewController'.") }
        if _R.storyboard.social().socialFriendsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialFriendsViewController' could not be loaded from storyboard 'Social' as 'SocialFriendsViewController'.") }
        if _R.storyboard.social().socialHelpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialHelpViewController' could not be loaded from storyboard 'Social' as 'SocialHelpViewController'.") }
        if _R.storyboard.social().socialNotificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialNotificationViewController' could not be loaded from storyboard 'Social' as 'SocialNotificationViewController'.") }
        if _R.storyboard.social().socialPrivacyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialPrivacyViewController' could not be loaded from storyboard 'Social' as 'SocialPrivacyViewController'.") }
        if _R.storyboard.social().socialProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialProfileViewController' could not be loaded from storyboard 'Social' as 'SocialProfileViewController'.") }
        if _R.storyboard.social().socialSettingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialSettingsViewController' could not be loaded from storyboard 'Social' as 'SocialSettingsViewController'.") }
        if _R.storyboard.social().videoCallViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videoCallViewController' could not be loaded from storyboard 'Social' as 'VideoCallViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sub: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let driverSearchViewController = StoryboardViewControllerResource<DriverSearchViewController>(identifier: "DriverSearchViewController")
      let editProfileViewController = StoryboardViewControllerResource<EditProfileViewController>(identifier: "EditProfileViewController")
      let findRideViewController = StoryboardViewControllerResource<FindRideViewController>(identifier: "FindRideViewController")
      let flightsSearchViewController = StoryboardViewControllerResource<FlightsSearchViewController>(identifier: "FlightsSearchViewController")
      let hotelCheckoutViewController = StoryboardViewControllerResource<HotelCheckoutViewController>(identifier: "HotelCheckoutViewController")
      let hotelDetailViewController = StoryboardViewControllerResource<HotelDetailViewController>(identifier: "HotelDetailViewController")
      let hotelReceiptViewController = StoryboardViewControllerResource<HotelReceiptViewController>(identifier: "HotelReceiptViewController")
      let hotelSearchViewController = StoryboardViewControllerResource<HotelSearchViewController>(identifier: "HotelSearchViewController")
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Sub"
      let rideshareMapViewController = StoryboardViewControllerResource<RideshareMapViewController>(identifier: "RideshareMapViewController")
      let supportViewController = StoryboardViewControllerResource<SupportViewController>(identifier: "SupportViewController")
      let termsViewController = StoryboardViewControllerResource<TermsViewController>(identifier: "TermsViewController")
      let travelFlightsViewController = StoryboardViewControllerResource<TravelFlightsViewController>(identifier: "TravelFlightsViewController")
      let travelHotelsViewController = StoryboardViewControllerResource<TravelHotelsViewController>(identifier: "TravelHotelsViewController")
      let travelRideshareViewController = StoryboardViewControllerResource<TravelRideshareViewController>(identifier: "TravelRideshareViewController")

      func driverSearchViewController(_: Void = ()) -> DriverSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: driverSearchViewController)
      }

      func editProfileViewController(_: Void = ()) -> EditProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileViewController)
      }

      func findRideViewController(_: Void = ()) -> FindRideViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findRideViewController)
      }

      func flightsSearchViewController(_: Void = ()) -> FlightsSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: flightsSearchViewController)
      }

      func hotelCheckoutViewController(_: Void = ()) -> HotelCheckoutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hotelCheckoutViewController)
      }

      func hotelDetailViewController(_: Void = ()) -> HotelDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hotelDetailViewController)
      }

      func hotelReceiptViewController(_: Void = ()) -> HotelReceiptViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hotelReceiptViewController)
      }

      func hotelSearchViewController(_: Void = ()) -> HotelSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hotelSearchViewController)
      }

      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }

      func rideshareMapViewController(_: Void = ()) -> RideshareMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rideshareMapViewController)
      }

      func supportViewController(_: Void = ()) -> SupportViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: supportViewController)
      }

      func termsViewController(_: Void = ()) -> TermsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsViewController)
      }

      func travelFlightsViewController(_: Void = ()) -> TravelFlightsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: travelFlightsViewController)
      }

      func travelHotelsViewController(_: Void = ()) -> TravelHotelsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: travelHotelsViewController)
      }

      func travelRideshareViewController(_: Void = ()) -> TravelRideshareViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: travelRideshareViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "DriverScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DriverScreen' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DriverSearchScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DriverSearchScreen' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "FindRideScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FindRideScreen' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WalletBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WalletBackground' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_arrow_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow_black' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_arrow_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow_white' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_save_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_save_white' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_driver_content", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_driver_content' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_flights_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_flights_info' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_flights_path", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_flights_path' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_flights_results", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_flights_results' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_flights_title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_flights_title' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_hotel_content", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_hotel_content' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_hotel_content2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_hotel_content2' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_hotel_content3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_hotel_content3' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_hotel_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_hotel_info' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_black' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_white' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_message_confirm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_message_confirm' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "screen_hotel_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'screen_hotel_checkout' is used in storyboard 'Sub', but couldn't be loaded.") }
        if UIKit.UIImage(named: "screen_hotel_receipt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'screen_hotel_receipt' is used in storyboard 'Sub', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.sub().driverSearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'driverSearchViewController' could not be loaded from storyboard 'Sub' as 'DriverSearchViewController'.") }
        if _R.storyboard.sub().editProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileViewController' could not be loaded from storyboard 'Sub' as 'EditProfileViewController'.") }
        if _R.storyboard.sub().findRideViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findRideViewController' could not be loaded from storyboard 'Sub' as 'FindRideViewController'.") }
        if _R.storyboard.sub().flightsSearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'flightsSearchViewController' could not be loaded from storyboard 'Sub' as 'FlightsSearchViewController'.") }
        if _R.storyboard.sub().hotelCheckoutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hotelCheckoutViewController' could not be loaded from storyboard 'Sub' as 'HotelCheckoutViewController'.") }
        if _R.storyboard.sub().hotelDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hotelDetailViewController' could not be loaded from storyboard 'Sub' as 'HotelDetailViewController'.") }
        if _R.storyboard.sub().hotelReceiptViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hotelReceiptViewController' could not be loaded from storyboard 'Sub' as 'HotelReceiptViewController'.") }
        if _R.storyboard.sub().hotelSearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hotelSearchViewController' could not be loaded from storyboard 'Sub' as 'HotelSearchViewController'.") }
        if _R.storyboard.sub().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Sub' as 'MainViewController'.") }
        if _R.storyboard.sub().rideshareMapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rideshareMapViewController' could not be loaded from storyboard 'Sub' as 'RideshareMapViewController'.") }
        if _R.storyboard.sub().supportViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'supportViewController' could not be loaded from storyboard 'Sub' as 'SupportViewController'.") }
        if _R.storyboard.sub().termsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsViewController' could not be loaded from storyboard 'Sub' as 'TermsViewController'.") }
        if _R.storyboard.sub().travelFlightsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'travelFlightsViewController' could not be loaded from storyboard 'Sub' as 'TravelFlightsViewController'.") }
        if _R.storyboard.sub().travelHotelsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'travelHotelsViewController' could not be loaded from storyboard 'Sub' as 'TravelHotelsViewController'.") }
        if _R.storyboard.sub().travelRideshareViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'travelRideshareViewController' could not be loaded from storyboard 'Sub' as 'TravelRideshareViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct wallet: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addCardViewController = StoryboardViewControllerResource<AddCardViewController>(identifier: "AddCardViewController")
      let bundle = R.hostingBundle
      let cardInfoViewController = StoryboardViewControllerResource<CardInfoViewController>(identifier: "CardInfoViewController")
      let contactAddViewController = StoryboardViewControllerResource<ContactAddViewController>(identifier: "ContactAddViewController")
      let createSavingsViewController = StoryboardViewControllerResource<CreateSavingsViewController>(identifier: "CreateSavingsViewController")
      let graphViewController = StoryboardViewControllerResource<GraphViewController>(identifier: "GraphViewController")
      let name = "Wallet"
      let propertyProfileViewController = StoryboardViewControllerResource<PropertyProfileViewController>(identifier: "PropertyProfileViewController")
      let savingsViewController = StoryboardViewControllerResource<SavingsViewController>(identifier: "SavingsViewController")
      let topupViewController = StoryboardViewControllerResource<TopupViewController>(identifier: "TopupViewController")
      let usersViewController = StoryboardViewControllerResource<UsersViewController>(identifier: "UsersViewController")
      let walletAccountsViewController = StoryboardViewControllerResource<WalletAccountsViewController>(identifier: "WalletAccountsViewController")
      let walletContactsViewController = StoryboardViewControllerResource<WalletContactsViewController>(identifier: "WalletContactsViewController")
      let walletPlusSigninViewController = StoryboardViewControllerResource<WalletPlusSigninViewController>(identifier: "WalletPlusSigninViewController")
      let walletPortfolioViewController = StoryboardViewControllerResource<WalletPortfolioViewController>(identifier: "WalletPortfolioViewController")
      let walletSendMoneyViewController = StoryboardViewControllerResource<WalletSendMoneyViewController>(identifier: "WalletSendMoneyViewController")
      let walletTransactionMapViewController = StoryboardViewControllerResource<WalletTransactionMapViewController>(identifier: "WalletTransactionMapViewController")
      let walletTransactionViewController = StoryboardViewControllerResource<WalletTransactionViewController>(identifier: "WalletTransactionViewController")
      let walletWalletPlusViewController = StoryboardViewControllerResource<WalletWalletPlusViewController>(identifier: "WalletWalletPlusViewController")

      func addCardViewController(_: Void = ()) -> AddCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addCardViewController)
      }

      func cardInfoViewController(_: Void = ()) -> CardInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardInfoViewController)
      }

      func contactAddViewController(_: Void = ()) -> ContactAddViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactAddViewController)
      }

      func createSavingsViewController(_: Void = ()) -> CreateSavingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createSavingsViewController)
      }

      func graphViewController(_: Void = ()) -> GraphViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: graphViewController)
      }

      func propertyProfileViewController(_: Void = ()) -> PropertyProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: propertyProfileViewController)
      }

      func savingsViewController(_: Void = ()) -> SavingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: savingsViewController)
      }

      func topupViewController(_: Void = ()) -> TopupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: topupViewController)
      }

      func usersViewController(_: Void = ()) -> UsersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: usersViewController)
      }

      func walletAccountsViewController(_: Void = ()) -> WalletAccountsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletAccountsViewController)
      }

      func walletContactsViewController(_: Void = ()) -> WalletContactsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletContactsViewController)
      }

      func walletPlusSigninViewController(_: Void = ()) -> WalletPlusSigninViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletPlusSigninViewController)
      }

      func walletPortfolioViewController(_: Void = ()) -> WalletPortfolioViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletPortfolioViewController)
      }

      func walletSendMoneyViewController(_: Void = ()) -> WalletSendMoneyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletSendMoneyViewController)
      }

      func walletTransactionMapViewController(_: Void = ()) -> WalletTransactionMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletTransactionMapViewController)
      }

      func walletTransactionViewController(_: Void = ()) -> WalletTransactionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletTransactionViewController)
      }

      func walletWalletPlusViewController(_: Void = ()) -> WalletWalletPlusViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletWalletPlusViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CleanBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CleanBackground' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WalletBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WalletBackground' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WalletHomeScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WalletHomeScreen' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WalletPlusWelcomeScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WalletPlusWelcomeScreen' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_add_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_add_card' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_apple' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_arrow_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow_black' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_arrow_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow_white' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_chip_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_chip_white' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_close_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close_black' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_contact_plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_contact_plus' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_create_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_create_white' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_down_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_down_red' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_eye_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eye_white' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_facebook' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_facebook_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_facebook_black' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_google' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_instagram_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_instagram_black' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_search_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_search_black' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_switch_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_switch_off' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_triple_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_triple_down' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_twitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_twitter' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_twitter_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_twitter_black' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_avatar_empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_avatar_empty' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_bevywallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_bevywallet' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_bevywallet_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_bevywallet_black' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_card_transaction", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_card_transaction' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_black' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_white' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_message_confirm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_message_confirm' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_savings_pig", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_savings_pig' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_starbucks", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_starbucks' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_topup_success", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_topup_success' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_transaction_map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_transaction_map' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "screen_property_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'screen_property_profile' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "screen_wallet_portfolio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'screen_wallet_portfolio' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.wallet().addCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addCardViewController' could not be loaded from storyboard 'Wallet' as 'AddCardViewController'.") }
        if _R.storyboard.wallet().cardInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardInfoViewController' could not be loaded from storyboard 'Wallet' as 'CardInfoViewController'.") }
        if _R.storyboard.wallet().contactAddViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactAddViewController' could not be loaded from storyboard 'Wallet' as 'ContactAddViewController'.") }
        if _R.storyboard.wallet().createSavingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createSavingsViewController' could not be loaded from storyboard 'Wallet' as 'CreateSavingsViewController'.") }
        if _R.storyboard.wallet().graphViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'graphViewController' could not be loaded from storyboard 'Wallet' as 'GraphViewController'.") }
        if _R.storyboard.wallet().propertyProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'propertyProfileViewController' could not be loaded from storyboard 'Wallet' as 'PropertyProfileViewController'.") }
        if _R.storyboard.wallet().savingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'savingsViewController' could not be loaded from storyboard 'Wallet' as 'SavingsViewController'.") }
        if _R.storyboard.wallet().topupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'topupViewController' could not be loaded from storyboard 'Wallet' as 'TopupViewController'.") }
        if _R.storyboard.wallet().usersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'usersViewController' could not be loaded from storyboard 'Wallet' as 'UsersViewController'.") }
        if _R.storyboard.wallet().walletAccountsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletAccountsViewController' could not be loaded from storyboard 'Wallet' as 'WalletAccountsViewController'.") }
        if _R.storyboard.wallet().walletContactsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletContactsViewController' could not be loaded from storyboard 'Wallet' as 'WalletContactsViewController'.") }
        if _R.storyboard.wallet().walletPlusSigninViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletPlusSigninViewController' could not be loaded from storyboard 'Wallet' as 'WalletPlusSigninViewController'.") }
        if _R.storyboard.wallet().walletPortfolioViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletPortfolioViewController' could not be loaded from storyboard 'Wallet' as 'WalletPortfolioViewController'.") }
        if _R.storyboard.wallet().walletSendMoneyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletSendMoneyViewController' could not be loaded from storyboard 'Wallet' as 'WalletSendMoneyViewController'.") }
        if _R.storyboard.wallet().walletTransactionMapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletTransactionMapViewController' could not be loaded from storyboard 'Wallet' as 'WalletTransactionMapViewController'.") }
        if _R.storyboard.wallet().walletTransactionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletTransactionViewController' could not be loaded from storyboard 'Wallet' as 'WalletTransactionViewController'.") }
        if _R.storyboard.wallet().walletWalletPlusViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletWalletPlusViewController' could not be loaded from storyboard 'Wallet' as 'WalletWalletPlusViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
